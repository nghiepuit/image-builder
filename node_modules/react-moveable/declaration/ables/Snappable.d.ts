import MoveableManager from "../MoveableManager";
import { Renderer, SnappableProps, SnappableState, Guideline, SnapInfo, ScalableProps, ResizableProps, RotatableProps, RectInfo } from "../types";
export declare function snapStart(moveable: MoveableManager<SnappableProps, SnappableState>): void;
export declare function hasGuidelines(moveable: MoveableManager<any, any>, ableName: string): moveable is MoveableManager<SnappableProps, SnappableState>;
export declare function checkSnapPoses(moveable: MoveableManager<SnappableProps, SnappableState>, posesX: number[], posesY: number[], snapCenter?: boolean, customSnapThreshold?: number): {
    vertical: SnapInfo;
    horizontal: SnapInfo;
};
export declare function checkSnaps(moveable: MoveableManager<SnappableProps, SnappableState>, rect: {
    left?: number;
    top?: number;
    bottom?: number;
    right?: number;
    center?: number;
    middle?: number;
}, isCenter: boolean, customSnapThreshold?: number): {
    vertical: SnapInfo;
    horizontal: SnapInfo;
};
export declare function getNearestSnapGuidelineInfo(snapInfo: SnapInfo): {
    isSnap: boolean;
    offset: number;
    dist: number;
    pos: number;
    guideline: null;
} | {
    isSnap: true;
    offset: number;
    dist: number;
    pos: number;
    guideline: Guideline;
};
export declare function checkOneWayPos(moveable: MoveableManager<any, any>, poses: number[][], reversePoses: number[][], isDirectionVertical: boolean, datas: any): number;
export declare function checkOneWayDist(moveable: MoveableManager<any, any>, poses: number[][], direction: number[], datas: any): number[];
export declare function checkTwoWayDist(moveable: MoveableManager<any, any>, poses: number[][], direction: number[], datas: any, matrix: number[], width: number, height: number, fixedPos: number[], is3d: boolean): number[];
export declare function checkSizeDist(moveable: MoveableManager<any, any>, matrix: number[], width: number, height: number, direction: number[], snapDirection: number[], datas: any, is3d: boolean): number[];
export declare function isBoundRotate(relativePoses: number[][], boundRect: {
    left: number;
    top: number;
    right: number;
    bottom: number;
}, rad: number): boolean;
export declare function boundRotate(vec: number[], boundPos: number, index: number): number[];
export declare function checkSnapRotate(moveable: MoveableManager<SnappableProps & RotatableProps, any>, rect: RectInfo, origin: number[], rotation: number): number;
export declare function checkSnapSize(moveable: MoveableManager<any, any>, width: number, height: number, direction: number[], datas: any): number[];
export declare function checkSnapScale(moveable: MoveableManager<ScalableProps, any>, scale: number[], direction: number[], snapDirection: number[], datas: any): number[];
export declare function solveEquation(pos1: number[], pos2: number[], snapOffset: number, isVertical: boolean): number[] | undefined;
export declare function getSnapInfosByDirection(moveable: MoveableManager<SnappableProps & (ResizableProps | ScalableProps), SnappableState>, poses: number[][], snapDirection: number[]): {
    vertical: SnapInfo;
    horizontal: SnapInfo;
};
export declare function startCheckSnapDrag(moveable: MoveableManager<any, any>, datas: any): void;
export declare function checkSnapDrag(moveable: MoveableManager<any, any>, distX: number, distY: number, datas: any): {
    isSnap: boolean;
    isBound: boolean;
    offset: number;
}[];
declare const _default: {
    name: string;
    props: {
        readonly snappable: readonly [BooleanConstructor, ArrayConstructor];
        readonly snapCenter: BooleanConstructor;
        readonly snapHorizontal: BooleanConstructor;
        readonly snapVertical: BooleanConstructor;
        readonly snapElement: BooleanConstructor;
        readonly snapThreshold: NumberConstructor;
        readonly horizontalGuidelines: ArrayConstructor;
        readonly verticalGuidelines: ArrayConstructor;
        readonly elementGuidelines: ArrayConstructor;
        readonly bounds: ObjectConstructor;
    };
    render(moveable: MoveableManager<SnappableProps, SnappableState>, React: Renderer): any[];
    dragStart(moveable: MoveableManager<SnappableProps, SnappableState>, e: any): void;
    pinchStart(moveable: MoveableManager<SnappableProps, SnappableState>): void;
    dragEnd(moveable: MoveableManager<SnappableProps, SnappableState>): void;
    dragControlCondition(target: SVGElement | HTMLElement): boolean;
    dragControlStart(moveable: MoveableManager<SnappableProps, SnappableState>, e: any): void;
    dragControlEnd(moveable: MoveableManager<SnappableProps, SnappableState>): void;
    dragGroupStart(moveable: any, e: any): void;
    dragGroupEnd(moveable: any): void;
    dragGroupControlStart(moveable: any, e: any): void;
    dragGroupControlEnd(moveable: any): void;
    unset(moveable: any): void;
};
export default _default;
