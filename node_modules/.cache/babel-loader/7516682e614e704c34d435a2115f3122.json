{"ast":null,"code":"import _objectSpread from \"/Users/nghiepphan/code/tham-khao/react-moveable-with-full-drag-select/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/nghiepphan/code/tham-khao/react-moveable-with-full-drag-select/src/artboard/artboard.tsx\";\n// Copyright (c) 2019-present Ladifire, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport classNames from 'classnames';\nimport { ref } from 'framework-utils';\nimport KeyController from 'keycon';\nimport React from 'react';\nimport MoveAble from 'react-moveable';\nimport { Frame, setAlias } from 'scenejs';\nimport BaseElement from '../elements/base-elements';\nimport '../elements/base-elements/style.scss';\nimport ReactDragSelectable from '../full-drag-select';\nimport Guides from '../guides';\nimport './style.scss';\nsetAlias('tx', ['transform', 'translateX']);\nsetAlias('ty', ['transform', 'translateY']);\nsetAlias('tz', ['transform', 'translateZ']);\nsetAlias('rotate', ['transform', 'rotate']);\nsetAlias('sx', ['transform', 'scaleX']);\nsetAlias('sy', ['transform', 'scaleY']);\nsetAlias('matrix3d', ['transform', 'matrix3d']);\nexport default class ArtBoard extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      hasElementResizing: false,\n      frame: {\n        translate: [0, 0, 0],\n        rotate: 0\n      },\n      showRuler: true,\n      selectables: {},\n      lastSelectElement: {\n        time: 0,\n        element: null\n      }\n    };\n    this.tooltip = void 0;\n\n    this.callback = (selection, event) => {};\n\n    this.moveable = void 0;\n    this.frameMap = new Map();\n    this.guides1 = null;\n    this.guides2 = null;\n\n    this.handleRenderGroup = ({\n      targets\n    }) => {\n      targets.forEach(target => this.handleRender({\n        target\n      }));\n    };\n\n    this.newFrame = el => {\n      const frame = new Frame({\n        transform: {\n          translateX: '0px',\n          translateY: '0px',\n          rotate: '0deg',\n          scaleX: 1,\n          scaleY: 1\n        }\n      });\n      this.frameMap.set(el, frame);\n      return frame;\n    };\n\n    this.getFrame = target => {\n      return this.frameMap.get(target) || this.newFrame(target);\n    };\n\n    this.handleRender = ({\n      target\n    }) => {\n      // const {frame} = this.state;\n      // target.style.transform = `translate(${frame.translate[0]}px, ${\n      //     frame.translate[1]\n      // }px) rotate(${frame.rotate}deg)`;\n      target.style.cssText += this.getFrame(target).toCSS();\n    };\n\n    this.dragSelector = void 0;\n\n    this.handleDragSelectRef = r => {\n      this.dragSelector = r;\n    };\n\n    this.handleChildMounted = (id, element) => {\n      if (!this.state.selectables[id]) {\n        setTimeout(() => {\n          this.setState({\n            selectables: _objectSpread(_objectSpread({}, this.state.selectables), {}, {\n              [id]: element\n            })\n          });\n        });\n      }\n    };\n\n    this.handleChildUnmounted = (id, element) => {};\n\n    this.handleVisibleElementsChange = visibleElements => {\n      this.setState({\n        visibleElements\n      });\n    };\n\n    this.fakeLoadingTimeout = void 0;\n\n    this.handleSelectChange = (newTarget, event) => {\n      if (this.state.lastSelectElement && this.state.lastSelectElement.element === newTarget && this.state.lastSelectElement.time && new Date().getTime() - this.state.lastSelectElement.time < 250) {\n        if (typeof this.props.onArtBoardDoubleClick === 'function') {\n          this.props.onArtBoardDoubleClick();\n        }\n      } else {\n        this.setState({\n          lastSelectElement: {\n            time: new Date().getTime(),\n            element: newTarget\n          }\n        });\n      }\n\n      let nextState = this.state.target || [];\n\n      if (newTarget) {\n        const index = nextState.indexOf(newTarget);\n\n        if (index === -1) {\n          if (this.state.ctrlKey) {\n            nextState = [...nextState, newTarget];\n          } else {\n            nextState = [newTarget];\n          }\n        } else if (this.state.ctrlKey) {\n          nextState.splice(index, 1);\n          nextState = nextState.slice();\n        }\n      } else {\n        nextState = [];\n      }\n\n      this.onTargetChange(nextState, () => {\n        this.moveable.dragStart(event);\n\n        if (this.state.target[0] === newTarget) {\n          this.moveable.updateRect();\n        }\n      });\n    };\n\n    this.handleMultipleSelectChange = (elements, event) => {\n      this.onTargetChange(elements, () => {// this.moveable.dragStart(event);\n        // this.moveable.updateRect();\n      });\n    };\n\n    this.onTargetChange = (newTarget, callback) => {\n      this.setState({\n        target: newTarget\n      }, () => {\n        if (typeof callback === 'function') {\n          callback();\n        }\n\n        if (typeof this.props.onTargetCountChange === 'function') {\n          this.props.onTargetCountChange(this.state.target ? this.state.target.length : 0);\n        }\n      });\n    };\n\n    this.handleElementClick = () => {};\n\n    this.handleGroupClick = ({\n      inputEvent,\n      inputTarget,\n      targets,\n      target,\n      isTarget,\n      targetIndex\n    }) => {\n      if (!inputTarget.classList.contains('element__wrapper')) {\n        return;\n      }\n\n      const index = targets.indexOf(inputTarget);\n      let nextTargets = targets.slice();\n\n      if (this.state.ctrlKey) {\n        if (index === -1) {\n          nextTargets = nextTargets.concat(inputTarget);\n        } else {\n          nextTargets.splice(index, 1);\n        }\n      } else {\n        nextTargets = [inputTarget];\n      }\n\n      this.onTargetChange(nextTargets, () => {\n        this.moveable.updateRect();\n      }); // this.setState({\n      //     target: nextTargets,\n      // }, () => {\n      //     this.moveable.updateRect();\n      // });\n    };\n\n    this.handleDragGroupStart = ({\n      events\n    }) => {\n      this.lockSelector();\n      events.forEach(this.handleDragStart);\n    };\n\n    this.handleDragGroup = ({\n      events\n    }) => {\n      events.forEach(this.handleDrag);\n    };\n\n    this.handleDragGroupEnd = ({\n      targets,\n      isDrag,\n      clientX,\n      clientY\n    }) => {\n      this.unLockSelector();\n      this.hideTooltip();\n    };\n\n    this.handleResizeGroupStart = ({\n      targets,\n      events\n    }) => {\n      this.lockSelector();\n      events.forEach(this.handleResizeStart);\n    };\n\n    this.handleResizeGroup = ({\n      targets,\n      events\n    }) => {\n      events.forEach(this.handleResize);\n    };\n\n    this.handleResizeGroupEnd = () => {\n      this.unLockSelector();\n      this.hideTooltip();\n    };\n\n    this.handleArtBoardRef = r => {\n      this.artBoard = r;\n    };\n\n    this.artBoard = null;\n\n    this.createTooltip = () => {\n      const tooltip = document.createElement('div');\n      tooltip.id = 'lf-m-tooltip';\n      tooltip.className = 'lf__tooltip';\n      tooltip.style.display = 'none';\n      const area = this.artBoard;\n\n      if (area) {\n        area.appendChild(tooltip);\n      }\n\n      return tooltip;\n    };\n\n    this.setTooltipContent = (clientX, clientY, text) => {\n      if (this.tooltip) {\n        this.tooltip.style.cssText = \"display: block; transform: translate(\".concat(clientX + 50, \"px, \").concat(clientY - 10, \"px) translate(-100%, -100%);\");\n        this.tooltip.innerHTML = text;\n      }\n    };\n\n    this.hideTooltip = () => {\n      if (this.tooltip) {\n        this.tooltip.style.display = 'none';\n      }\n    };\n\n    this.lockSelector = () => {\n      this.setState({\n        hasElementResizing: true\n      });\n    };\n\n    this.unLockSelector = () => {\n      this.setState({\n        hasElementResizing: false\n      });\n    };\n\n    this.handleDragStart = ({\n      target,\n      set\n    }) => {\n      this.lockSelector();\n      const frame = this.getFrame(target);\n      set([parseFloat(frame.get('transform', 'translateX')), parseFloat(frame.get('transform', 'translateY'))]);\n    };\n\n    this.handleDrag = ({\n      target,\n      beforeTranslate,\n      translate,\n      delta,\n      left,\n      top,\n      clientX,\n      clientY,\n      isPinch\n    }) => {\n      const frame = this.getFrame(target);\n\n      if (this.state.shiftKey) {\n        if (delta[0] !== 0) {\n          frame.set('transform', 'translateX', \"\".concat(beforeTranslate[0], \"px\"));\n        } else if (delta[1] !== 0) {\n          frame.set('transform', 'translateY', \"\".concat(beforeTranslate[1], \"px\"));\n        }\n      } else {\n        frame.set('transform', 'translateX', \"\".concat(beforeTranslate[0], \"px\"));\n        frame.set('transform', 'translateY', \"\".concat(beforeTranslate[1], \"px\"));\n      }\n\n      if (!isPinch) {\n        this.setTooltipContent(clientX, clientY, \"X: \".concat(Math.round(left), \"px<br/>Y: \").concat(Math.round(top), \"px\"));\n      }\n    };\n\n    this.handleDragEnd = () => {\n      this.unLockSelector();\n      this.hideTooltip();\n    };\n\n    this.handleResizeStart = ({\n      target,\n      setOrigin,\n      dragStart\n    }) => {\n      this.lockSelector();\n      setOrigin(['%', '%']);\n      const frame = this.getFrame(target);\n\n      if (dragStart) {\n        dragStart.set([parseFloat(frame.get('tx')), parseFloat(frame.get('ty'))]);\n      }\n    };\n\n    this.handleResize = ({\n      target,\n      width,\n      height,\n      drag,\n      clientX,\n      clientY,\n      isPinch\n    }) => {\n      const frame = this.getFrame(target);\n      frame.set('width', \"\".concat(width, \"px\"));\n      frame.set('height', \"\".concat(height, \"px\"));\n      frame.set('tx', \"\".concat(drag.beforeTranslate[0], \"px\"));\n      frame.set('ty', \"\".concat(drag.beforeTranslate[1], \"px\")); // target.style.cssText += frame.toCSS();\n\n      if (!isPinch) {\n        this.setTooltipContent(clientX, clientY, \"W: \".concat(width.toFixed(0), \"px<br/>H: \").concat(height.toFixed(0), \"px\"));\n      }\n    };\n\n    this.handleResizeEnd = () => {\n      this.unLockSelector();\n      this.hideTooltip();\n    };\n\n    this.handleRotateStart = ({\n      target,\n      set\n    }) => {\n      this.lockSelector();\n      const frame = this.getFrame(target);\n      set(parseFloat(frame.get('transform', 'rotate')));\n    };\n\n    this.handleRotate = ({\n      target,\n      beforeRotate,\n      clientX,\n      clientY,\n      isPinch,\n      beforeDelta\n    }) => {\n      // const deg = parseFloat(this.state.frame.rotate) + beforeDelta;\n      // if (!isPinch) {\n      //     this.setTooltipContent(clientX, clientY, `R: ${deg.toFixed(1)}`);\n      // }\n      const frame = this.getFrame(target);\n      const deg = parseFloat(frame.get('transform', 'rotate')) + beforeDelta;\n      frame.set('transform', 'rotate', \"\".concat(deg, \"deg\"));\n      target.style.cssText += frame.toCSS();\n      this.moveable.updateRect();\n    };\n\n    this.handleRotateEnd = () => {\n      this.unLockSelector();\n      this.hideTooltip();\n    };\n\n    this.handleRotateGroupStart = ({\n      targets,\n      events\n    }) => {\n      this.lockSelector();\n      events.forEach(({\n        target,\n        set,\n        dragStart\n      }) => {\n        const frame = this.getFrame(target);\n        const tx = parseFloat(frame.get('transform', 'translateX')) || 0;\n        const ty = parseFloat(frame.get('transform', 'translateY')) || 0;\n        const rotate = parseFloat(frame.get('transform', 'rotate')) || 0;\n        set(rotate);\n\n        if (dragStart) {\n          dragStart.set([tx, ty]);\n        }\n      }); // events.forEach(this.handleRotateStart);\n    };\n\n    this.handleRotateGroup = ({\n      targets,\n      events,\n      set\n    }) => {\n      // events.forEach(this.handleRotate);\n      events.forEach(({\n        target,\n        beforeRotate,\n        drag\n      }) => {\n        const frame = this.getFrame(target);\n        const beforeTranslate = drag.beforeTranslate;\n        frame.set('transform', 'rotate', \"\".concat(beforeRotate, \"deg\"));\n        frame.set('transform', 'translateX', \"\".concat(beforeTranslate[0], \"px\"));\n        frame.set('transform', 'translateY', \"\".concat(beforeTranslate[1], \"px\"));\n        target.style.cssText += frame.toCSS();\n      });\n    };\n\n    this.handleRotateGroupEnd = ({\n      targets,\n      isDrag\n    }) => {\n      this.unLockSelector();\n    };\n\n    this.distributeElements = (elements, distribution) => {\n      if (elements && elements.length > 0) {\n        if (elements.length > 2) {\n          let firstElement = null;\n          let lastElement = null;\n\n          if (distribution === 'vertical') {\n            // we need to sort elements by the y coordination of middle line\n            elements.sort((e1, e2) => {\n              const e1Rect = e1.getBoundingClientRect();\n              const e2Rect = e2.getBoundingClientRect();\n              return e1Rect.y - e2Rect.y;\n            });\n            firstElement = elements[0];\n            const firstElementRect = firstElement.getBoundingClientRect();\n            const firstElementMiddle = firstElementRect.y + firstElementRect.height / 2;\n            lastElement = elements[elements.length - 1];\n            const lastElementRect = lastElement.getBoundingClientRect();\n            const totalElements = elements.length;\n            const totalSpacing = Math.abs(firstElementRect.y - firstElementRect.height / 2 - (lastElementRect.y - lastElementRect.height / 2));\n\n            if (totalSpacing > 0) {\n              const averageSpacing = totalSpacing / (totalElements - 1);\n\n              for (let i = 1; i < totalElements - 1; i++) {\n                // calculate distance from middle of this element to middle of first element\n                const currentElementRect = elements[i].getBoundingClientRect();\n                const oldDistance = currentElementRect.y + currentElementRect.height / 2 - firstElementMiddle;\n                const frame = this.getFrame(elements[i]);\n\n                if (frame) {\n                  // old transform\n                  const oldTransformY = parseFloat(frame.get('transform', 'translateY'));\n                  frame.set('transform', 'translateY', \"\".concat(oldTransformY - (oldDistance - averageSpacing * i), \"px\")); // update target css\n\n                  elements[i].style.cssText += frame.toCSS();\n                }\n              }\n\n              this.moveable.updateRect();\n            }\n          } else if (distribution === 'horizontal') {\n            // we need to sort elements by the y coordination of middle line\n            elements.sort((e1, e2) => {\n              const e1Rect = e1.getBoundingClientRect();\n              const e2Rect = e2.getBoundingClientRect();\n              return e1Rect.x - e2Rect.x;\n            });\n            firstElement = elements[0];\n            const firstElementRect = firstElement.getBoundingClientRect();\n            const firstElementMiddle = firstElementRect.x + firstElementRect.width / 2;\n            lastElement = elements[elements.length - 1];\n            const lastElementRect = lastElement.getBoundingClientRect();\n            const totalElements = elements.length;\n            const totalSpacing = Math.abs(firstElementRect.x - firstElementRect.width / 2 - (lastElementRect.x - lastElementRect.width / 2));\n\n            if (totalSpacing > 0) {\n              const averageSpacing = totalSpacing / (totalElements - 1);\n\n              for (let i = 1; i < totalElements - 1; i++) {\n                // calculate distance from middle of this element to middle of first element\n                const currentElementRect = elements[i].getBoundingClientRect();\n                const oldDistance = currentElementRect.x + currentElementRect.width / 2 - firstElementMiddle;\n                const frame = this.getFrame(elements[i]);\n\n                if (frame) {\n                  // old transform\n                  const oldTransformX = parseFloat(frame.get('transform', 'translateX'));\n                  frame.set('transform', 'translateX', \"\".concat(oldTransformX - (oldDistance - averageSpacing * i), \"px\")); // update target css\n\n                  elements[i].style.cssText += frame.toCSS();\n                }\n              }\n\n              this.moveable.updateRect();\n            }\n          }\n        }\n      }\n    };\n\n    this.renderMoveable = () => {\n      const _this$state = this.state,\n            horizontalGuidelines = _this$state.horizontalGuidelines,\n            verticalGuidelines = _this$state.verticalGuidelines;\n      return /*#__PURE__*/React.createElement(MoveAble, {\n        ref: ref(this, 'moveable') // edge={true}\n        ,\n        target: this.state.target,\n        draggable: true,\n        snappable: true,\n        snapCenter: true,\n        throttleDrag: 0,\n        origin: false,\n        resizable: true,\n        throttleResize: 0,\n        rotatable: true,\n        rotationAtCorner: false,\n        scrollable: true,\n        scrollContainer: document.documentElement,\n        scrollThreshold: 1,\n        keepRatio: this.state.shiftKey,\n        throttleRotate: this.state.shiftKey ? 30 : 0,\n        onRender: this.handleRender,\n        onRenderGroup: this.handleRenderGroup,\n        elementGuidelines: this.state.visibleElements,\n        verticalGuidelines: verticalGuidelines,\n        horizontalGuidelines: horizontalGuidelines,\n        onDragStart: this.handleDragStart,\n        onDrag: this.handleDrag,\n        onDragEnd: this.handleDragEnd,\n        onRotateStart: this.handleRotateStart,\n        onRotate: this.handleRotate,\n        onRotateEnd: this.handleRotateEnd,\n        onResizeStart: this.handleResizeStart,\n        onResize: this.handleResize,\n        onResizeEnd: this.handleResizeEnd,\n        onResizeGroupStart: this.handleResizeGroupStart,\n        onResizeGroup: this.handleResizeGroup,\n        onResizeGroupEnd: this.handleResizeGroupEnd,\n        onClick: this.handleElementClick,\n        onClickGroup: this.handleGroupClick,\n        onDragGroupStart: this.handleDragGroupStart,\n        onDragGroup: this.handleDragGroup,\n        onDragGroupEnd: this.handleDragGroupEnd,\n        onRotateGroupStart: this.handleRotateGroupStart,\n        onRotateGroup: this.handleRotateGroup,\n        onRotateGroupEnd: this.handleRotateGroupEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 7\n        }\n      });\n    };\n\n    this.renderGuides = () => {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 851,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('ruler', 'horizontal'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Guides, {\n        ref: ref(this, 'guides1'),\n        type: \"horizontal\",\n        rulerStyle: {\n          left: '20px',\n          width: 'calc(100% - 20px)',\n          height: '100%'\n        },\n        setGuides: guides => {\n          this.setState({\n            horizontalGuidelines: guides.map(g => g + 20)\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('ruler', 'vertical'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Guides, {\n        ref: ref(this, 'guides2'),\n        type: \"vertical\",\n        rulerStyle: {\n          top: '0',\n          height: '100%',\n          width: '100%'\n        },\n        setGuides: guides => {\n          this.setState({\n            verticalGuidelines: guides.map(g => g + 20)\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    this.renderLoading = () => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 12\n        }\n      }, 'Fake loading...');\n    };\n\n    this.renderDemo = () => {\n      const demoElements = []; // custom element, you can wrap any thing in <BaseElement/>\n\n      const customElement = /*#__PURE__*/React.createElement(BaseElement, {\n        key: \"custom__element\",\n        style: {\n          top: 30,\n          left: 100,\n          backgroundColor: '#aaa',\n          padding: 10\n        },\n        onMounted: this.handleChildMounted,\n        onUnmounted: this.handleChildUnmounted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 13\n        }\n      }, \"This is paragraph\")), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 11\n        }\n      }, \"Button\")));\n      const customElement2 = /*#__PURE__*/React.createElement(BaseElement, {\n        key: \"custom__element\",\n        style: {\n          top: 30,\n          left: 250,\n          backgroundColor: '#aaa',\n          padding: 10\n        },\n        onMounted: this.handleChildMounted,\n        onUnmounted: this.handleChildUnmounted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        alt: \"test\",\n        src: \"https://hackernoon.com/hn-images/1*OVenkpgBSpBJKwgwRwrYkg.jpeg\",\n        height: 150,\n        width: 150,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 11\n        }\n      })));\n      demoElements.push(customElement);\n      demoElements.push(customElement2);\n      let index = 0;\n\n      for (let column = 0; column < 4; column++) {\n        for (let i = 0; i < 30; i++) {\n          index++;\n          demoElements.push( /*#__PURE__*/React.createElement(BaseElement, {\n            key: \"column__\".concat(column, \"_element__\").concat(i),\n            style: {\n              top: i === 0 ? 250 : i * 150 + 100,\n              left: column * 150 + 60,\n              backgroundColor: '#aaa',\n              padding: 10\n            },\n            onMounted: this.handleChildMounted,\n            onUnmounted: this.handleChildUnmounted,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 947,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 958,\n              columnNumber: 13\n            }\n          }, \"test__\".concat(index))));\n        }\n      }\n\n      return demoElements;\n    };\n\n    this.renderContent = () => {\n      const viewMode = this.props.viewMode;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('art_board_area', \"art_board__\".concat(viewMode)),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 971,\n          columnNumber: 7\n        }\n      }, this.renderDemo());\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.fakeLoadingTimeout = setTimeout(() => {\n      this.setState({\n        isLoading: false\n      });\n      clearTimeout(this.fakeLoadingTimeout);\n    }, 1500);\n  }\n\n  componentDidMount() {\n    this.tooltip = this.createTooltip(); // setup guides\n\n    window.addEventListener('resize', () => {\n      if (this.guides1) {\n        this.guides1.resize();\n      }\n\n      if (this.guides2) {\n        this.guides2.resize();\n      }\n    });\n    const keycon = new KeyController(window);\n    keycon.keydown(['ctrl', 'a'], event => {\n      console.log('ctrl + A', event);\n    });\n    keycon.keydown('shift', () => {\n      this.setState({\n        shiftKey: true\n      });\n    }).keyup('shift', () => {\n      this.setState({\n        shiftKey: false\n      });\n    });\n    keycon.keydown('ctrl', () => {\n      this.setState({\n        ctrlKey: true\n      });\n    }).keyup('ctrl', () => {\n      this.setState({\n        ctrlKey: false\n      });\n    });\n    keycon.keydown('r', () => {\n      if (!this.state.rKey) {\n        console.log('r key press');\n        this.setState({\n          rKey: true\n        });\n      }\n    }).keyup('r', () => {\n      if (this.state.rKey) {\n        console.log('r key up');\n        this.setState({\n          rKey: false\n        });\n      }\n    });\n  }\n\n  setAlignment(alignment) {\n    const target = this.state.target;\n\n    if (target && target.length > 0) {\n      const baseElement = target[0];\n\n      if (target.length > 1) {\n        // alignment to selection\n        if (baseElement) {\n          const baseElementRect = baseElement.getBoundingClientRect();\n\n          if (baseElementRect) {\n            for (let i = 1; i < target.length; i++) {\n              const currentRect = target[i].getBoundingClientRect();\n              const frame = this.getFrame(target[i]);\n\n              if (frame) {\n                // old transform\n                const oldTransformX = parseFloat(frame.get('transform', 'translateX'));\n                const oldTransformY = parseFloat(frame.get('transform', 'translateY'));\n                let translateX = 0;\n                let translateY = 0;\n\n                if (alignment === 'left') {\n                  translateX = baseElementRect.x - currentRect.x;\n                } else if (alignment === 'center') {\n                  translateX = baseElementRect.x + baseElementRect.width / 2 - (currentRect.x + currentRect.width / 2);\n                } else if (alignment === 'right') {\n                  translateX = baseElementRect.x - currentRect.x + (baseElementRect.width - currentRect.width);\n                } else if (alignment === 'top') {\n                  translateY = baseElementRect.y - currentRect.y;\n                } else if (alignment === 'middle') {\n                  translateY = baseElementRect.y + baseElementRect.height / 2 - (currentRect.y + currentRect.height / 2);\n                } else if (alignment === 'bottom') {\n                  translateY = baseElementRect.y + baseElementRect.height - currentRect.y - currentRect.height;\n                }\n\n                if (translateX !== 0) {\n                  frame.set('transform', 'translateX', \"\".concat(oldTransformX + translateX, \"px\"));\n                }\n\n                if (translateY !== 0) {\n                  frame.set('transform', 'translateY', \"\".concat(oldTransformY + translateY, \"px\"));\n                } // update target css\n\n\n                target[i].style.cssText += frame.toCSS();\n                this.moveable.updateRect();\n              }\n            }\n          }\n        }\n      } else if (target.length === 1) {\n        // alignment to art board\n        alert('should align to art board');\n      }\n    }\n  }\n\n  setDistribution(distribution) {\n    const target = this.state.target;\n    return this.distributeElements(target, distribution);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          isLoading = _this$state2.isLoading,\n          showRuler = _this$state2.showRuler;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.handleArtBoardRef,\n      className: classNames('art_board_wrapper', {\n        art_board__loading: isLoading,\n        show__ruler: showRuler\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 9\n      }\n    }, isLoading && this.renderLoading(), !isLoading && this.renderContent(), this.renderMoveable()), !isLoading && showRuler && this.renderGuides(), /*#__PURE__*/React.createElement(ReactDragSelectable, {\n      ref: this.handleDragSelectRef,\n      container: this.artBoard,\n      observerAbleClass: \"element__wrapper\",\n      selectAbleClass: \"element__selectable\",\n      onSelectChange: this.handleSelectChange,\n      onMultipleSelectChange: this.handleMultipleSelectChange,\n      locked: this.state.hasElementResizing,\n      selectables: this.state.selectables,\n      onVisibleElementsChange: this.handleVisibleElementsChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nArtBoard.defaultProps = {\n  viewMode: 'desktop'\n};","map":{"version":3,"sources":["/Users/nghiepphan/code/tham-khao/react-moveable-with-full-drag-select/src/artboard/artboard.tsx"],"names":["classNames","ref","KeyController","React","MoveAble","Frame","setAlias","BaseElement","ReactDragSelectable","Guides","ArtBoard","PureComponent","state","isLoading","hasElementResizing","frame","translate","rotate","showRuler","selectables","lastSelectElement","time","element","tooltip","callback","selection","event","moveable","frameMap","Map","guides1","guides2","handleRenderGroup","targets","forEach","target","handleRender","newFrame","el","transform","translateX","translateY","scaleX","scaleY","set","getFrame","get","style","cssText","toCSS","dragSelector","handleDragSelectRef","r","handleChildMounted","id","setTimeout","setState","handleChildUnmounted","handleVisibleElementsChange","visibleElements","fakeLoadingTimeout","handleSelectChange","newTarget","Date","getTime","props","onArtBoardDoubleClick","nextState","index","indexOf","ctrlKey","splice","slice","onTargetChange","dragStart","updateRect","handleMultipleSelectChange","elements","onTargetCountChange","length","handleElementClick","handleGroupClick","inputEvent","inputTarget","isTarget","targetIndex","classList","contains","nextTargets","concat","handleDragGroupStart","events","lockSelector","handleDragStart","handleDragGroup","handleDrag","handleDragGroupEnd","isDrag","clientX","clientY","unLockSelector","hideTooltip","handleResizeGroupStart","handleResizeStart","handleResizeGroup","handleResize","handleResizeGroupEnd","handleArtBoardRef","artBoard","createTooltip","document","createElement","className","display","area","appendChild","setTooltipContent","text","innerHTML","parseFloat","beforeTranslate","delta","left","top","isPinch","shiftKey","Math","round","handleDragEnd","setOrigin","width","height","drag","toFixed","handleResizeEnd","handleRotateStart","handleRotate","beforeRotate","beforeDelta","deg","handleRotateEnd","handleRotateGroupStart","tx","ty","handleRotateGroup","handleRotateGroupEnd","distributeElements","distribution","firstElement","lastElement","sort","e1","e2","e1Rect","getBoundingClientRect","e2Rect","y","firstElementRect","firstElementMiddle","lastElementRect","totalElements","totalSpacing","abs","averageSpacing","i","currentElementRect","oldDistance","oldTransformY","x","oldTransformX","renderMoveable","horizontalGuidelines","verticalGuidelines","documentElement","renderGuides","guides","map","g","renderLoading","renderDemo","demoElements","customElement","backgroundColor","padding","customElement2","push","column","renderContent","viewMode","UNSAFE_componentWillMount","clearTimeout","componentDidMount","window","addEventListener","resize","keycon","keydown","console","log","keyup","rKey","setAlignment","alignment","baseElement","baseElementRect","currentRect","alert","setDistribution","render","art_board__loading","show__ruler","defaultProps"],"mappings":"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","sourcesContent":["// Copyright (c) 2019-present Ladifire, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport classNames from 'classnames';\nimport { ref } from 'framework-utils';\nimport KeyController from 'keycon';\nimport React from 'react';\nimport MoveAble, {\n  MoveableManagerProps,\n  OnClickGroup,\n  OnDrag,\n  OnDragGroupEnd,\n  OnDragGroupStart,\n  OnDragStart,\n  OnRender,\n  OnRenderGroup,\n  OnResize,\n  OnResizeGroup,\n  OnResizeGroupStart,\n  OnResizeStart,\n  OnRotate,\n  OnRotateGroup,\n  OnRotateGroupEnd,\n  OnRotateGroupStart,\n  OnRotateStart,\n} from 'react-moveable';\nimport { Frame, setAlias } from 'scenejs';\nimport BaseElement from '../elements/base-elements';\nimport '../elements/base-elements/style.scss';\nimport ReactDragSelectable from '../full-drag-select';\nimport Guides from '../guides';\nimport './style.scss';\nimport { Targets } from './type';\n\nsetAlias('tx', ['transform', 'translateX']);\nsetAlias('ty', ['transform', 'translateY']);\nsetAlias('tz', ['transform', 'translateZ']);\nsetAlias('rotate', ['transform', 'rotate']);\nsetAlias('sx', ['transform', 'scaleX']);\nsetAlias('sy', ['transform', 'scaleY']);\nsetAlias('matrix3d', ['transform', 'matrix3d']);\n\ntype ArtBoardProps = {\n  /** Desktop, tablet or mobile view */\n  viewMode: string;\n\n  /** Should trigger when target length is changed, we need to notify target count changed*/\n  onTargetCountChange?: (count: number) => void;\n  onArtBoardDoubleClick?: Function;\n};\n\ntype TranslateType = number[];\n\ntype ArtBoardState = {\n  isLoading?: boolean;\n  hasElementResizing?: boolean;\n  frame: {\n    translate: TranslateType;\n    rotate: number;\n  };\n  target?: any;\n  shiftKey?: boolean;\n  ctrlKey?: boolean;\n  rKey?: boolean;\n  verticalGuidelines?: number[];\n  horizontalGuidelines?: number[];\n  showRuler?: boolean;\n  selectables: {\n    [id: string]: HTMLElement | SVGAElement | null;\n  };\n  visibleElements?: Array<HTMLElement | SVGAElement>;\n  lastSelectElement: {\n    time?: number;\n    element?: HTMLElement | SVGAElement | undefined | null;\n  };\n};\n\nexport default class ArtBoard extends React.PureComponent<\n  ArtBoardProps,\n  ArtBoardState\n> {\n  static defaultProps: ArtBoardProps = {\n    viewMode: 'desktop',\n  };\n\n  state: ArtBoardState = {\n    isLoading: true,\n    hasElementResizing: false,\n    frame: {\n      translate: [0, 0, 0],\n      rotate: 0,\n    },\n    showRuler: true,\n    selectables: {},\n    lastSelectElement: {\n      time: 0,\n      element: null,\n    },\n  };\n\n  /** MoveAble tooltip */\n  private tooltip: HTMLElement | undefined;\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  callback: Function = (selection: any, event: any) => {};\n  private moveable: MoveableManagerProps<any>;\n  private frameMap = new Map();\n\n  private guides1: Guides | null = null;\n  private guides2: Guides | null = null;\n  private handleRenderGroup: any = ({ targets }: OnRenderGroup) => {\n    targets.forEach((target) => this.handleRender({ target }));\n  };\n\n  /**\n   * Create new frame and assign it to frameMap*/\n  newFrame = (el: HTMLElement | SVGAElement) => {\n    const frame = new Frame({\n      transform: {\n        translateX: '0px',\n        translateY: '0px',\n        rotate: '0deg',\n        scaleX: 1,\n        scaleY: 1,\n      },\n    });\n\n    this.frameMap.set(el, frame);\n\n    return frame;\n  };\n\n  getFrame = (target: HTMLElement | SVGAElement) => {\n    return this.frameMap.get(target) || this.newFrame(target);\n  };\n\n  private handleRender: any = ({ target }: OnRender) => {\n    // const {frame} = this.state;\n    // target.style.transform = `translate(${frame.translate[0]}px, ${\n    //     frame.translate[1]\n    // }px) rotate(${frame.rotate}deg)`;\n\n    target.style.cssText += this.getFrame(\n      target as HTMLElement | SVGAElement\n    ).toCSS();\n  };\n\n  private dragSelector: any;\n  private handleDragSelectRef: any = (r: any) => {\n    this.dragSelector = r;\n  };\n\n  private handleChildMounted: any = (\n    id: string,\n    element: HTMLElement | SVGAElement | null\n  ) => {\n    if (!this.state.selectables[id]) {\n      setTimeout(() => {\n        this.setState({\n          selectables: {\n            ...this.state.selectables,\n            [id]: element,\n          },\n        });\n      });\n    }\n  };\n  private handleChildUnmounted: any = (\n    id: string,\n    element: HTMLElement | SVGAElement | null\n  ) => {};\n  private handleVisibleElementsChange: any = (\n    visibleElements: Array<HTMLElement | SVGAElement>\n  ) => {\n    this.setState({ visibleElements });\n  };\n\n  UNSAFE_componentWillMount(): void {\n    this.fakeLoadingTimeout = setTimeout(() => {\n      this.setState({ isLoading: false });\n      clearTimeout(this.fakeLoadingTimeout);\n    }, 1500);\n  }\n\n  componentDidMount(): void {\n    this.tooltip = this.createTooltip();\n\n    // setup guides\n    window.addEventListener('resize', () => {\n      if (this.guides1) {\n        this.guides1.resize();\n      }\n\n      if (this.guides2) {\n        this.guides2.resize();\n      }\n    });\n\n    const keycon = new KeyController(window);\n    keycon.keydown(['ctrl', 'a'], (event) => {\n      console.log('ctrl + A', event);\n    });\n\n    keycon\n      .keydown('shift', () => {\n        this.setState({ shiftKey: true });\n      })\n      .keyup('shift', () => {\n        this.setState({ shiftKey: false });\n      });\n\n    keycon\n      .keydown('ctrl', () => {\n        this.setState({ ctrlKey: true });\n      })\n      .keyup('ctrl', () => {\n        this.setState({ ctrlKey: false });\n      });\n\n    keycon\n      .keydown('r', () => {\n        if (!this.state.rKey) {\n          console.log('r key press');\n          this.setState({ rKey: true });\n        }\n      })\n      .keyup('r', () => {\n        if (this.state.rKey) {\n          console.log('r key up');\n          this.setState({ rKey: false });\n        }\n      });\n  }\n\n  fakeLoadingTimeout?: any;\n\n  handleSelectChange = (\n    newTarget?: HTMLElement | SVGAElement | undefined | null,\n    event?: MouseEvent\n  ) => {\n    if (\n      this.state.lastSelectElement &&\n      this.state.lastSelectElement.element === newTarget &&\n      this.state.lastSelectElement.time &&\n      new Date().getTime() - this.state.lastSelectElement.time < 250\n    ) {\n      if (typeof this.props.onArtBoardDoubleClick === 'function') {\n        this.props.onArtBoardDoubleClick();\n      }\n    } else {\n      this.setState({\n        lastSelectElement: {\n          time: new Date().getTime(),\n          element: newTarget,\n        },\n      });\n    }\n    let nextState: Targets = this.state.target || [];\n    if (newTarget) {\n      const index = nextState.indexOf(newTarget);\n      if (index === -1) {\n        if (this.state.ctrlKey) {\n          nextState = [...nextState, newTarget];\n        } else {\n          nextState = [newTarget];\n        }\n      } else if (this.state.ctrlKey) {\n        nextState.splice(index, 1);\n        nextState = nextState.slice();\n      }\n    } else {\n      nextState = [];\n    }\n\n    this.onTargetChange(nextState, () => {\n      this.moveable.dragStart(event);\n      if (this.state.target[0] === newTarget) {\n        this.moveable.updateRect();\n      }\n    });\n  };\n\n  handleMultipleSelectChange = (\n    elements: Array<HTMLElement | SVGAElement>,\n    event: MouseEvent\n  ) => {\n    this.onTargetChange(elements, () => {\n      // this.moveable.dragStart(event);\n      // this.moveable.updateRect();\n    });\n  };\n\n  private onTargetChange: any = (newTarget: any, callback?: Function) => {\n    this.setState(\n      {\n        target: newTarget,\n      },\n      () => {\n        if (typeof callback === 'function') {\n          callback();\n        }\n\n        if (typeof this.props.onTargetCountChange === 'function') {\n          this.props.onTargetCountChange(\n            this.state.target ? this.state.target.length : 0\n          );\n        }\n      }\n    );\n  };\n\n  private handleElementClick: any = () => {};\n\n  private handleGroupClick: any = ({\n    inputEvent,\n    inputTarget,\n    targets,\n    target,\n    isTarget,\n    targetIndex,\n  }: OnClickGroup) => {\n    if (!inputTarget.classList.contains('element__wrapper')) {\n      return;\n    }\n\n    const index = targets.indexOf(inputTarget);\n    let nextTargets = targets.slice();\n\n    if (this.state.ctrlKey) {\n      if (index === -1) {\n        nextTargets = nextTargets.concat(inputTarget);\n      } else {\n        nextTargets.splice(index, 1);\n      }\n    } else {\n      nextTargets = [inputTarget];\n    }\n\n    this.onTargetChange(nextTargets, () => {\n      this.moveable.updateRect();\n    });\n\n    // this.setState({\n    //     target: nextTargets,\n    // }, () => {\n    //     this.moveable.updateRect();\n    // });\n  };\n  private handleDragGroupStart: any = ({ events }: OnDragGroupStart) => {\n    this.lockSelector();\n\n    events.forEach(this.handleDragStart);\n  };\n  private handleDragGroup: any = ({ events }: OnDragGroupStart) => {\n    events.forEach(this.handleDrag);\n  };\n  private handleDragGroupEnd: any = ({\n    targets,\n    isDrag,\n    clientX,\n    clientY,\n  }: OnDragGroupEnd) => {\n    this.unLockSelector();\n    this.hideTooltip();\n  };\n  private handleResizeGroupStart: any = ({\n    targets,\n    events,\n  }: OnResizeGroupStart) => {\n    this.lockSelector();\n    events.forEach(this.handleResizeStart);\n  };\n  private handleResizeGroup: any = ({ targets, events }: OnResizeGroup) => {\n    events.forEach(this.handleResize);\n  };\n  private handleResizeGroupEnd: any = () => {\n    this.unLockSelector();\n    this.hideTooltip();\n  };\n\n  handleArtBoardRef = (r: HTMLDivElement) => {\n    this.artBoard = r;\n  };\n  artBoard: HTMLElement | null = null;\n\n  createTooltip = () => {\n    const tooltip = document.createElement('div');\n\n    tooltip.id = 'lf-m-tooltip';\n    tooltip.className = 'lf__tooltip';\n    tooltip.style.display = 'none';\n    const area = this.artBoard;\n    if (area) {\n      area.appendChild(tooltip);\n    }\n\n    return tooltip;\n  };\n\n  setTooltipContent = (clientX: number, clientY: number, text: string) => {\n    if (this.tooltip) {\n      this.tooltip.style.cssText = `display: block; transform: translate(${\n        clientX + 50\n      }px, ${clientY - 10}px) translate(-100%, -100%);`;\n      this.tooltip.innerHTML = text;\n    }\n  };\n\n  hideTooltip = () => {\n    if (this.tooltip) {\n      this.tooltip.style.display = 'none';\n    }\n  };\n\n  lockSelector = () => {\n    this.setState({ hasElementResizing: true });\n  };\n\n  unLockSelector = () => {\n    this.setState({ hasElementResizing: false });\n  };\n\n  private handleDragStart: any = ({ target, set }: OnDragStart) => {\n    this.lockSelector();\n    const frame = this.getFrame(target as HTMLElement | SVGAElement);\n    set([\n      parseFloat(frame.get('transform', 'translateX')),\n      parseFloat(frame.get('transform', 'translateY')),\n    ]);\n  };\n\n  private handleDrag: any = ({\n    target,\n    beforeTranslate,\n    translate,\n    delta,\n    left,\n    top,\n    clientX,\n    clientY,\n    isPinch,\n  }: OnDrag) => {\n    const frame = this.getFrame(target as HTMLElement | SVGAElement);\n    if (this.state.shiftKey) {\n      if (delta[0] !== 0) {\n        frame.set('transform', 'translateX', `${beforeTranslate[0]}px`);\n      } else if (delta[1] !== 0) {\n        frame.set('transform', 'translateY', `${beforeTranslate[1]}px`);\n      }\n    } else {\n      frame.set('transform', 'translateX', `${beforeTranslate[0]}px`);\n      frame.set('transform', 'translateY', `${beforeTranslate[1]}px`);\n    }\n\n    if (!isPinch) {\n      this.setTooltipContent(\n        clientX,\n        clientY,\n        `X: ${Math.round(left)}px<br/>Y: ${Math.round(top)}px`\n      );\n    }\n  };\n\n  private handleDragEnd: any = () => {\n    this.unLockSelector();\n    this.hideTooltip();\n  };\n\n  private handleResizeStart: any = ({\n    target,\n    setOrigin,\n    dragStart,\n  }: OnResizeStart) => {\n    this.lockSelector();\n    setOrigin(['%', '%']);\n    const frame = this.getFrame(target as HTMLElement | SVGAElement);\n    if (dragStart) {\n      dragStart.set([parseFloat(frame.get('tx')), parseFloat(frame.get('ty'))]);\n    }\n  };\n\n  private handleResize: any = ({\n    target,\n    width,\n    height,\n    drag,\n    clientX,\n    clientY,\n    isPinch,\n  }: OnResize) => {\n    const frame = this.getFrame(target as HTMLElement | SVGAElement);\n    frame.set('width', `${width}px`);\n    frame.set('height', `${height}px`);\n    frame.set('tx', `${drag.beforeTranslate[0]}px`);\n    frame.set('ty', `${drag.beforeTranslate[1]}px`);\n\n    // target.style.cssText += frame.toCSS();\n\n    if (!isPinch) {\n      this.setTooltipContent(\n        clientX,\n        clientY,\n        `W: ${width.toFixed(0)}px<br/>H: ${height.toFixed(0)}px`\n      );\n    }\n  };\n\n  private handleResizeEnd: any = () => {\n    this.unLockSelector();\n    this.hideTooltip();\n  };\n\n  private handleRotateStart: any = ({ target, set }: OnRotateStart) => {\n    this.lockSelector();\n\n    const frame = this.getFrame(target as HTMLElement | SVGAElement);\n    set(parseFloat(frame.get('transform', 'rotate')));\n  };\n\n  private handleRotate: any = ({\n    target,\n    beforeRotate,\n    clientX,\n    clientY,\n    isPinch,\n    beforeDelta,\n  }: OnRotate) => {\n    // const deg = parseFloat(this.state.frame.rotate) + beforeDelta;\n    // if (!isPinch) {\n    //     this.setTooltipContent(clientX, clientY, `R: ${deg.toFixed(1)}`);\n    // }\n\n    const frame = this.getFrame(target as HTMLElement | SVGAElement);\n    const deg = parseFloat(frame.get('transform', 'rotate')) + beforeDelta;\n    frame.set('transform', 'rotate', `${deg}deg`);\n    target.style.cssText += frame.toCSS();\n    this.moveable.updateRect();\n  };\n\n  private handleRotateEnd: any = () => {\n    this.unLockSelector();\n    this.hideTooltip();\n  };\n\n  private handleRotateGroupStart: any = ({\n    targets,\n    events,\n  }: OnRotateGroupStart) => {\n    this.lockSelector();\n    events.forEach(({ target, set, dragStart }) => {\n      const frame = this.getFrame(target as HTMLElement | SVGAElement);\n      const tx = parseFloat(frame.get('transform', 'translateX')) || 0;\n      const ty = parseFloat(frame.get('transform', 'translateY')) || 0;\n      const rotate = parseFloat(frame.get('transform', 'rotate')) || 0;\n\n      set(rotate);\n\n      if (dragStart) {\n        dragStart.set([tx, ty]);\n      }\n    });\n\n    // events.forEach(this.handleRotateStart);\n  };\n  private handleRotateGroup: any = ({\n    targets,\n    events,\n    set,\n  }: OnRotateGroup) => {\n    // events.forEach(this.handleRotate);\n    events.forEach(({ target, beforeRotate, drag }) => {\n      const frame = this.getFrame(target as HTMLElement | SVGAElement);\n      const beforeTranslate = drag.beforeTranslate;\n\n      frame.set('transform', 'rotate', `${beforeRotate}deg`);\n      frame.set('transform', 'translateX', `${beforeTranslate[0]}px`);\n      frame.set('transform', 'translateY', `${beforeTranslate[1]}px`);\n      target.style.cssText += frame.toCSS();\n    });\n  };\n  private handleRotateGroupEnd: any = ({\n    targets,\n    isDrag,\n  }: OnRotateGroupEnd) => {\n    this.unLockSelector();\n  };\n\n  public setAlignment(alignment: string) {\n    const { target } = this.state;\n\n    if (target && target.length > 0) {\n      const baseElement: HTMLElement | SVGAElement | any = target[0];\n      if (target.length > 1) {\n        // alignment to selection\n        if (baseElement) {\n          const baseElementRect = baseElement.getBoundingClientRect();\n          if (baseElementRect) {\n            for (let i = 1; i < target.length; i++) {\n              const currentRect = target[i].getBoundingClientRect();\n              const frame = this.getFrame(target[i]);\n              if (frame) {\n                // old transform\n                const oldTransformX = parseFloat(\n                  frame.get('transform', 'translateX')\n                );\n                const oldTransformY = parseFloat(\n                  frame.get('transform', 'translateY')\n                );\n                let translateX = 0;\n                let translateY = 0;\n                if (alignment === 'left') {\n                  translateX = baseElementRect.x - currentRect.x;\n                } else if (alignment === 'center') {\n                  translateX =\n                    baseElementRect.x +\n                    baseElementRect.width / 2 -\n                    (currentRect.x + currentRect.width / 2);\n                } else if (alignment === 'right') {\n                  translateX =\n                    baseElementRect.x -\n                    currentRect.x +\n                    (baseElementRect.width - currentRect.width);\n                } else if (alignment === 'top') {\n                  translateY = baseElementRect.y - currentRect.y;\n                } else if (alignment === 'middle') {\n                  translateY =\n                    baseElementRect.y +\n                    baseElementRect.height / 2 -\n                    (currentRect.y + currentRect.height / 2);\n                } else if (alignment === 'bottom') {\n                  translateY =\n                    baseElementRect.y +\n                    baseElementRect.height -\n                    currentRect.y -\n                    currentRect.height;\n                }\n\n                if (translateX !== 0) {\n                  frame.set(\n                    'transform',\n                    'translateX',\n                    `${oldTransformX + translateX}px`\n                  );\n                }\n\n                if (translateY !== 0) {\n                  frame.set(\n                    'transform',\n                    'translateY',\n                    `${oldTransformY + translateY}px`\n                  );\n                }\n\n                // update target css\n                target[i].style.cssText += frame.toCSS();\n                this.moveable.updateRect();\n              }\n            }\n          }\n        }\n      } else if (target.length === 1) {\n        // alignment to art board\n        alert('should align to art board');\n      }\n    }\n  }\n\n  private distributeElements = (\n    elements: (HTMLElement | SVGAElement | any)[],\n    distribution: string\n  ) => {\n    if (elements && elements.length > 0) {\n      if (elements.length > 2) {\n        let firstElement: HTMLElement | SVGAElement | null | any = null;\n        let lastElement: HTMLElement | SVGAElement | null | any = null;\n        if (distribution === 'vertical') {\n          // we need to sort elements by the y coordination of middle line\n          elements.sort(\n            (\n              e1: HTMLElement | SVGAElement | any,\n              e2: HTMLElement | SVGAElement | any\n            ) => {\n              const e1Rect = e1.getBoundingClientRect();\n              const e2Rect = e2.getBoundingClientRect();\n\n              return e1Rect.y - e2Rect.y;\n            }\n          );\n\n          firstElement = elements[0];\n          const firstElementRect = firstElement.getBoundingClientRect();\n          const firstElementMiddle =\n            firstElementRect.y + firstElementRect.height / 2;\n          lastElement = elements[elements.length - 1];\n          const lastElementRect = lastElement.getBoundingClientRect();\n\n          const totalElements = elements.length;\n          const totalSpacing = Math.abs(\n            firstElementRect.y -\n              firstElementRect.height / 2 -\n              (lastElementRect.y - lastElementRect.height / 2)\n          );\n\n          if (totalSpacing > 0) {\n            const averageSpacing = totalSpacing / (totalElements - 1);\n            for (let i = 1; i < totalElements - 1; i++) {\n              // calculate distance from middle of this element to middle of first element\n              const currentElementRect = elements[i].getBoundingClientRect();\n              const oldDistance =\n                currentElementRect.y +\n                currentElementRect.height / 2 -\n                firstElementMiddle;\n\n              const frame = this.getFrame(elements[i]);\n              if (frame) {\n                // old transform\n                const oldTransformY = parseFloat(\n                  frame.get('transform', 'translateY')\n                );\n                frame.set(\n                  'transform',\n                  'translateY',\n                  `${oldTransformY - (oldDistance - averageSpacing * i)}px`\n                );\n\n                // update target css\n                elements[i].style.cssText += frame.toCSS();\n              }\n            }\n            this.moveable.updateRect();\n          }\n        } else if (distribution === 'horizontal') {\n          // we need to sort elements by the y coordination of middle line\n          elements.sort(\n            (\n              e1: HTMLElement | SVGAElement | any,\n              e2: HTMLElement | SVGAElement | any\n            ) => {\n              const e1Rect = e1.getBoundingClientRect();\n              const e2Rect = e2.getBoundingClientRect();\n\n              return e1Rect.x - e2Rect.x;\n            }\n          );\n\n          firstElement = elements[0];\n          const firstElementRect = firstElement.getBoundingClientRect();\n          const firstElementMiddle =\n            firstElementRect.x + firstElementRect.width / 2;\n          lastElement = elements[elements.length - 1];\n          const lastElementRect = lastElement.getBoundingClientRect();\n\n          const totalElements = elements.length;\n          const totalSpacing = Math.abs(\n            firstElementRect.x -\n              firstElementRect.width / 2 -\n              (lastElementRect.x - lastElementRect.width / 2)\n          );\n\n          if (totalSpacing > 0) {\n            const averageSpacing = totalSpacing / (totalElements - 1);\n            for (let i = 1; i < totalElements - 1; i++) {\n              // calculate distance from middle of this element to middle of first element\n              const currentElementRect = elements[i].getBoundingClientRect();\n              const oldDistance =\n                currentElementRect.x +\n                currentElementRect.width / 2 -\n                firstElementMiddle;\n\n              const frame = this.getFrame(elements[i]);\n              if (frame) {\n                // old transform\n                const oldTransformX = parseFloat(\n                  frame.get('transform', 'translateX')\n                );\n                frame.set(\n                  'transform',\n                  'translateX',\n                  `${oldTransformX - (oldDistance - averageSpacing * i)}px`\n                );\n\n                // update target css\n                elements[i].style.cssText += frame.toCSS();\n              }\n            }\n            this.moveable.updateRect();\n          }\n        }\n      }\n    }\n  };\n\n  public setDistribution(distribution: string) {\n    const { target } = this.state;\n\n    return this.distributeElements(target, distribution);\n  }\n\n  renderMoveable = () => {\n    const { horizontalGuidelines, verticalGuidelines } = this.state;\n\n    return (\n      <MoveAble\n        ref={ref(this, 'moveable')}\n        // edge={true}\n        target={this.state.target}\n        draggable={true}\n        snappable={true}\n        snapCenter={true}\n        throttleDrag={0}\n        origin={false}\n        resizable={true}\n        throttleResize={0}\n        rotatable={true}\n        rotationAtCorner={false}\n        scrollable={true}\n        scrollContainer={document.documentElement}\n        scrollThreshold={1}\n        keepRatio={this.state.shiftKey}\n        throttleRotate={this.state.shiftKey ? 30 : 0}\n        onRender={this.handleRender}\n        onRenderGroup={this.handleRenderGroup}\n        elementGuidelines={this.state.visibleElements}\n        verticalGuidelines={verticalGuidelines}\n        horizontalGuidelines={horizontalGuidelines}\n        onDragStart={this.handleDragStart}\n        onDrag={this.handleDrag}\n        onDragEnd={this.handleDragEnd}\n        onRotateStart={this.handleRotateStart}\n        onRotate={this.handleRotate}\n        onRotateEnd={this.handleRotateEnd}\n        onResizeStart={this.handleResizeStart}\n        onResize={this.handleResize}\n        onResizeEnd={this.handleResizeEnd}\n        onResizeGroupStart={this.handleResizeGroupStart}\n        onResizeGroup={this.handleResizeGroup}\n        onResizeGroupEnd={this.handleResizeGroupEnd}\n        onClick={this.handleElementClick}\n        onClickGroup={this.handleGroupClick}\n        onDragGroupStart={this.handleDragGroupStart}\n        onDragGroup={this.handleDragGroup}\n        onDragGroupEnd={this.handleDragGroupEnd}\n        onRotateGroupStart={this.handleRotateGroupStart}\n        onRotateGroup={this.handleRotateGroup}\n        onRotateGroupEnd={this.handleRotateGroupEnd}\n      />\n    );\n  };\n\n  renderGuides = () => {\n    return (\n      <React.Fragment>\n        <div className=\"box\" />\n        <div className={classNames('ruler', 'horizontal')}>\n          <Guides\n            ref={ref(this, 'guides1')}\n            type=\"horizontal\"\n            rulerStyle={{\n              left: '20px',\n              width: 'calc(100% - 20px)',\n              height: '100%',\n            }}\n            setGuides={(guides) => {\n              this.setState({\n                horizontalGuidelines: guides.map((g) => g + 20),\n              });\n            }}\n          />\n        </div>\n        <div className={classNames('ruler', 'vertical')}>\n          <Guides\n            ref={ref(this, 'guides2')}\n            type=\"vertical\"\n            rulerStyle={{\n              top: '0',\n              height: '100%',\n              width: '100%',\n            }}\n            setGuides={(guides) => {\n              this.setState({ verticalGuidelines: guides.map((g) => g + 20) });\n            }}\n          />\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  renderLoading = () => {\n    return <span>{'Fake loading...'}</span>;\n  };\n\n  renderDemo = () => {\n    const demoElements = [];\n\n    // custom element, you can wrap any thing in <BaseElement/>\n\n    const customElement = (\n      <BaseElement\n        key={`custom__element`}\n        style={{\n          top: 30,\n          left: 100,\n          backgroundColor: '#aaa',\n          padding: 10,\n        }}\n        onMounted={this.handleChildMounted}\n        onUnmounted={this.handleChildUnmounted}\n      >\n        <div>\n          <div>\n            <p>This is paragraph</p>\n          </div>\n          <button>Button</button>\n        </div>\n      </BaseElement>\n    );\n\n    const customElement2 = (\n      <BaseElement\n        key={`custom__element`}\n        style={{\n          top: 30,\n          left: 250,\n          backgroundColor: '#aaa',\n          padding: 10,\n        }}\n        onMounted={this.handleChildMounted}\n        onUnmounted={this.handleChildUnmounted}\n      >\n        <div>\n          <img\n            alt=\"test\"\n            src=\"https://hackernoon.com/hn-images/1*OVenkpgBSpBJKwgwRwrYkg.jpeg\"\n            height={150}\n            width={150}\n          />\n        </div>\n      </BaseElement>\n    );\n\n    demoElements.push(customElement);\n    demoElements.push(customElement2);\n\n    let index = 0;\n    for (let column = 0; column < 4; column++) {\n      for (let i = 0; i < 30; i++) {\n        index++;\n        demoElements.push(\n          <BaseElement\n            key={`column__${column}_element__${i}`}\n            style={{\n              top: i === 0 ? 250 : i * 150 + 100,\n              left: column * 150 + 60,\n              backgroundColor: '#aaa',\n              padding: 10,\n            }}\n            onMounted={this.handleChildMounted}\n            onUnmounted={this.handleChildUnmounted}\n          >\n            <div>{`test__${index}`}</div>\n          </BaseElement>\n        );\n      }\n    }\n\n    return demoElements;\n  };\n\n  renderContent = () => {\n    const { viewMode } = this.props;\n\n    return (\n      <div className={classNames('art_board_area', `art_board__${viewMode}`)}>\n        {this.renderDemo()}\n      </div>\n    );\n  };\n\n  render() {\n    const { isLoading, showRuler } = this.state;\n    return (\n      <React.Fragment>\n        <div\n          ref={this.handleArtBoardRef}\n          className={classNames('art_board_wrapper', {\n            art_board__loading: isLoading,\n            show__ruler: showRuler,\n          })}\n        >\n          {isLoading && this.renderLoading()}\n          {!isLoading && this.renderContent()}\n          {this.renderMoveable()}\n        </div>\n        {!isLoading && showRuler && this.renderGuides()}\n        <ReactDragSelectable\n          ref={this.handleDragSelectRef}\n          container={this.artBoard}\n          observerAbleClass=\"element__wrapper\"\n          selectAbleClass=\"element__selectable\"\n          onSelectChange={this.handleSelectChange}\n          onMultipleSelectChange={this.handleMultipleSelectChange}\n          locked={this.state.hasElementResizing}\n          selectables={this.state.selectables}\n          onVisibleElementsChange={this.handleVisibleElementsChange}\n        />\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}