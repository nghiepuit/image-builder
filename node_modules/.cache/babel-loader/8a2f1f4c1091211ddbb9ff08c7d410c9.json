{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: @daybrush/drag\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/drag.git\nversion: 0.12.0\n*/\nimport { removeEvent, addEvent } from '@daybrush/utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction getPinchDragPosition(clients, prevClients, startClients, startPinchClients) {\n  var nowCenter = getAverageClient(clients);\n  var prevCenter = getAverageClient(prevClients);\n  var startCenter = getAverageClient(startPinchClients);\n  var pinchClient = getAddClient(startPinchClients[0], getMinusClient(nowCenter, startCenter));\n  var pinchPrevClient = getAddClient(startPinchClients[0], getMinusClient(prevCenter, startCenter));\n  return getPosition(pinchClient, pinchPrevClient, startClients[0]);\n}\n\nfunction isMultiTouch(e) {\n  return e.touches && e.touches.length >= 2;\n}\n\nfunction getPositionEvent(e) {\n  if (e.touches) {\n    return getClients(e.touches);\n  } else {\n    return [getClient(e)];\n  }\n}\n\nfunction getPosition(client, prevClient, startClient) {\n  var clientX = client.clientX,\n      clientY = client.clientY;\n  var prevX = prevClient.clientX,\n      prevY = prevClient.clientY;\n  var startX = startClient.clientX,\n      startY = startClient.clientY;\n  var deltaX = clientX - prevX;\n  var deltaY = clientY - prevY;\n  var distX = clientX - startX;\n  var distY = clientY - startY;\n  return {\n    clientX: clientX,\n    clientY: clientY,\n    deltaX: deltaX,\n    deltaY: deltaY,\n    distX: distX,\n    distY: distY\n  };\n}\n\nfunction getDist(clients) {\n  return Math.sqrt(Math.pow(clients[0].clientX - clients[1].clientX, 2) + Math.pow(clients[0].clientY - clients[1].clientY, 2));\n}\n\nfunction getPositions(clients, prevClients, startClients) {\n  return clients.map(function (client, i) {\n    return getPosition(client, prevClients[i], startClients[i]);\n  });\n}\n\nfunction getClients(touches) {\n  var length = Math.min(touches.length, 2);\n  var clients = [];\n\n  for (var i = 0; i < length; ++i) {\n    clients.push(getClient(touches[i]));\n  }\n\n  return clients;\n}\n\nfunction getClient(e) {\n  return {\n    clientX: e.clientX,\n    clientY: e.clientY\n  };\n}\n\nfunction getAverageClient(clients) {\n  return {\n    clientX: (clients[0].clientX + clients[1].clientX) / 2,\n    clientY: (clients[0].clientY + clients[1].clientY) / 2\n  };\n}\n\nfunction getAddClient(client1, client2) {\n  return {\n    clientX: client1.clientX + client2.clientX,\n    clientY: client1.clientY + client2.clientY\n  };\n}\n\nfunction getMinusClient(client1, client2) {\n  return {\n    clientX: client1.clientX - client2.clientX,\n    clientY: client1.clientY - client2.clientY\n  };\n}\n/**\n * You can set up drag events in any browser.\n */\n\n\nvar Dragger = /*#__PURE__*/function () {\n  /**\n   *\n   */\n  function Dragger(el, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.el = el;\n    this.options = {};\n    this.flag = false;\n    this.pinchFlag = false;\n    this.datas = {};\n    this.isDrag = false;\n    this.isPinch = false;\n    this.isMouse = false;\n    this.isTouch = false;\n    this.prevClients = [];\n    this.startClients = [];\n    this.movement = 0;\n    this.startPinchClients = [];\n    this.startDistance = 0;\n    this.customDist = [0, 0];\n    /**\n     * @method\n     */\n\n    this.onDragStart = function (e) {\n      if (!_this.flag && e.cancelable === false) {\n        return;\n      }\n\n      if (isMultiTouch(e)) {\n        if (!_this.flag && e.touches.length !== e.changedTouches.length) {\n          return;\n        }\n\n        if (!_this.pinchFlag) {\n          _this.onPinchStart(e);\n        }\n      }\n\n      if (_this.flag) {\n        return;\n      }\n\n      var clients = _this.startClients[0] ? _this.startClients : getPositionEvent(e);\n      _this.customDist = [0, 0];\n      _this.flag = true;\n      _this.isDrag = false;\n      _this.startClients = clients;\n      _this.prevClients = clients;\n      _this.datas = {};\n      _this.movement = 0;\n      var position = getPosition(clients[0], _this.prevClients[0], _this.startClients[0]);\n      var _a = _this.options,\n          dragstart = _a.dragstart,\n          preventRightClick = _a.preventRightClick,\n          preventDefault = _a.preventDefault;\n\n      if (preventRightClick && e.which === 3 || (dragstart && dragstart(_assign({\n        datas: _this.datas,\n        inputEvent: e\n      }, position))) === false) {\n        _this.startClients = [];\n        _this.prevClients = [];\n        _this.flag = false;\n      }\n\n      _this.flag && preventDefault && e.preventDefault();\n    };\n\n    this.onDrag = function (e, isScroll) {\n      if (!_this.flag) {\n        return;\n      }\n\n      var clients = getPositionEvent(e);\n\n      if (_this.pinchFlag) {\n        _this.onPinch(e, clients);\n      }\n\n      var result = _this.move([0, 0], e, clients);\n\n      if (!result || !result.deltaX && !result.deltaY) {\n        return;\n      }\n\n      var drag = _this.options.drag;\n      drag && drag(_assign({}, result, {\n        isScroll: !!isScroll,\n        inputEvent: e\n      }));\n    };\n\n    this.onDragEnd = function (e) {\n      if (!_this.flag) {\n        return;\n      }\n\n      if (_this.pinchFlag) {\n        _this.onPinchEnd(e);\n      }\n\n      _this.flag = false;\n      var dragend = _this.options.dragend;\n      var prevClients = _this.prevClients;\n      var startClients = _this.startClients;\n      var position = _this.pinchFlag ? getPinchDragPosition(prevClients, prevClients, startClients, _this.startPinchClients) : getPosition(prevClients[0], prevClients[0], startClients[0]);\n      _this.startClients = [];\n      _this.prevClients = [];\n      dragend && dragend(_assign({\n        datas: _this.datas,\n        isDrag: _this.isDrag,\n        inputEvent: e\n      }, position));\n    };\n\n    this.options = _assign({\n      container: el,\n      preventRightClick: true,\n      preventDefault: true,\n      pinchThreshold: 0,\n      events: [\"touch\", \"mouse\"]\n    }, options);\n    var _a = this.options,\n        container = _a.container,\n        events = _a.events;\n    this.isTouch = events.indexOf(\"touch\") > -1;\n    this.isMouse = events.indexOf(\"mouse\") > -1;\n    this.customDist = [0, 0];\n\n    if (this.isMouse) {\n      addEvent(el, \"mousedown\", this.onDragStart);\n      addEvent(container, \"mousemove\", this.onDrag);\n      addEvent(container, \"mouseup\", this.onDragEnd);\n    }\n\n    if (this.isTouch) {\n      var passive = {\n        passive: false\n      };\n      addEvent(el, \"touchstart\", this.onDragStart, passive);\n      addEvent(container, \"touchmove\", this.onDrag, passive);\n      addEvent(container, \"touchend\", this.onDragEnd, passive);\n    }\n  }\n  /**\n   *\n   */\n\n\n  var __proto = Dragger.prototype;\n\n  __proto.isDragging = function () {\n    return this.isDrag;\n  };\n  /**\n   *\n   */\n\n\n  __proto.isFlag = function () {\n    return this.flag;\n  };\n  /**\n   *\n   */\n\n\n  __proto.isPinching = function () {\n    return this.isPinch;\n  };\n  /**\n   *\n   */\n\n\n  __proto.scrollBy = function (deltaX, deltaY, e, isCallDrag) {\n    if (isCallDrag === void 0) {\n      isCallDrag = true;\n    }\n\n    if (!this.flag) {\n      return;\n    }\n\n    this.startClients.forEach(function (client) {\n      client.clientX -= deltaX;\n      client.clientY -= deltaY;\n    });\n    this.prevClients.forEach(function (client) {\n      client.clientX -= deltaX;\n      client.clientY -= deltaY;\n    });\n    isCallDrag && this.onDrag(e, true);\n  };\n\n  __proto.move = function (_a, inputEvent, clients) {\n    var deltaX = _a[0],\n        deltaY = _a[1];\n\n    if (clients === void 0) {\n      clients = this.prevClients;\n    }\n\n    var customDist = this.customDist;\n    var prevClients = this.prevClients;\n    var startClients = this.startClients;\n    var position = this.pinchFlag ? getPinchDragPosition(clients, prevClients, startClients, this.startPinchClients) : getPosition(clients[0], prevClients[0], startClients[0]);\n    customDist[0] += deltaX;\n    customDist[1] += deltaY;\n    position.deltaX += deltaX;\n    position.deltaY += deltaY;\n    var positionDeltaX = position.deltaX,\n        positionDeltaY = position.deltaY;\n    position.distX += customDist[0];\n    position.distY += customDist[1];\n    this.movement += Math.sqrt(positionDeltaX * positionDeltaX + positionDeltaY * positionDeltaY);\n    this.prevClients = clients;\n    this.isDrag = true;\n    return _assign({\n      datas: this.datas\n    }, position, {\n      isScroll: false,\n      inputEvent: inputEvent\n    });\n  };\n\n  __proto.onPinchStart = function (e) {\n    var _a, _b;\n\n    var _c = this.options,\n        pinchstart = _c.pinchstart,\n        pinchThreshold = _c.pinchThreshold;\n\n    if (this.isDrag && this.movement > pinchThreshold) {\n      return;\n    }\n\n    var pinchClients = getClients(e.changedTouches);\n    this.pinchFlag = true;\n\n    (_a = this.startClients).push.apply(_a, pinchClients);\n\n    (_b = this.prevClients).push.apply(_b, pinchClients);\n\n    this.startDistance = getDist(this.prevClients);\n    this.startPinchClients = this.prevClients.slice();\n\n    if (!pinchstart) {\n      return;\n    }\n\n    var startClients = this.prevClients;\n    var startAverageClient = getAverageClient(startClients);\n    var centerPosition = getPosition(startAverageClient, startAverageClient, startAverageClient);\n    pinchstart(_assign({\n      datas: this.datas,\n      touches: getPositions(startClients, startClients, startClients)\n    }, centerPosition, {\n      inputEvent: e\n    }));\n  };\n\n  __proto.onPinch = function (e, clients) {\n    if (!this.flag || !this.pinchFlag) {\n      return;\n    }\n\n    this.isPinch = true;\n    var pinch = this.options.pinch;\n\n    if (!pinch) {\n      return;\n    }\n\n    var prevClients = this.prevClients;\n    var startClients = this.startClients;\n    var centerPosition = getPosition(getAverageClient(clients), getAverageClient(prevClients), getAverageClient(startClients));\n    var distance = getDist(clients);\n    pinch(_assign({\n      datas: this.datas,\n      touches: getPositions(clients, prevClients, startClients),\n      scale: distance / this.startDistance,\n      distance: distance\n    }, centerPosition, {\n      inputEvent: e\n    }));\n  };\n\n  __proto.onPinchEnd = function (e) {\n    if (!this.flag || !this.pinchFlag) {\n      return;\n    }\n\n    var isPinch = this.isPinch;\n    this.isPinch = false;\n    this.pinchFlag = false;\n    var pinchend = this.options.pinchend;\n\n    if (!pinchend) {\n      return;\n    }\n\n    var prevClients = this.prevClients;\n    var startClients = this.startClients;\n    var centerPosition = getPosition(getAverageClient(prevClients), getAverageClient(prevClients), getAverageClient(startClients));\n    pinchend(_assign({\n      datas: this.datas,\n      isPinch: isPinch,\n      touches: getPositions(prevClients, prevClients, startClients)\n    }, centerPosition, {\n      inputEvent: e\n    }));\n    this.isPinch = false;\n    this.pinchFlag = false;\n  };\n  /**\n   *\n   */\n\n\n  __proto.unset = function () {\n    var el = this.el;\n    var container = this.options.container;\n\n    if (this.isMouse) {\n      removeEvent(el, \"mousedown\", this.onDragStart);\n      removeEvent(container, \"mousemove\", this.onDrag);\n      removeEvent(container, \"mouseup\", this.onDragEnd);\n    }\n\n    if (this.isTouch) {\n      removeEvent(el, \"touchstart\", this.onDragStart);\n      removeEvent(container, \"touchmove\", this.onDrag);\n      removeEvent(container, \"touchend\", this.onDragEnd);\n    }\n  };\n\n  return Dragger;\n}();\n\nfunction setDrag(el, options) {\n  return new Dragger(el, options);\n}\n\nexport default Dragger;\nexport { setDrag as drag };","map":null,"metadata":{},"sourceType":"module"}