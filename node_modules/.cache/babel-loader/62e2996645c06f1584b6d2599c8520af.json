{"ast":null,"code":"/*\nCopyright (c) Daybrush\nname: keycon\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/keycon.git\nversion: 0.8.0\n*/\nimport Component from '@egjs/component';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar keycode = createCommonjsModule(function (module, exports) {\n  // Source: http://jsfiddle.net/vWx8V/\n  // http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes\n\n  /**\n   * Conenience method returns corresponding value for given keyName or keyCode.\n   *\n   * @param {Mixed} keyCode {Number} or keyName {String}\n   * @return {Mixed}\n   * @api public\n   */\n  function keyCode(searchInput) {\n    // Keyboard Events\n    if (searchInput && 'object' === typeof searchInput) {\n      var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;\n      if (hasKeyCode) searchInput = hasKeyCode;\n    } // Numbers\n\n\n    if ('number' === typeof searchInput) return names[searchInput]; // Everything else (cast to string)\n\n    var search = String(searchInput); // check codes\n\n    var foundNamedKey = codes[search.toLowerCase()];\n    if (foundNamedKey) return foundNamedKey; // check aliases\n\n    var foundNamedKey = aliases[search.toLowerCase()];\n    if (foundNamedKey) return foundNamedKey; // weird character?\n\n    if (search.length === 1) return search.charCodeAt(0);\n    return undefined;\n  }\n  /**\n   * Compares a keyboard event with a given keyCode or keyName.\n   *\n   * @param {Event} event Keyboard event that should be tested\n   * @param {Mixed} keyCode {Number} or keyName {String}\n   * @return {Boolean}\n   * @api public\n   */\n\n\n  keyCode.isEventKey = function isEventKey(event, nameOrCode) {\n    if (event && 'object' === typeof event) {\n      var keyCode = event.which || event.keyCode || event.charCode;\n\n      if (keyCode === null || keyCode === undefined) {\n        return false;\n      }\n\n      if (typeof nameOrCode === 'string') {\n        // check codes\n        var foundNamedKey = codes[nameOrCode.toLowerCase()];\n\n        if (foundNamedKey) {\n          return foundNamedKey === keyCode;\n        } // check aliases\n\n\n        var foundNamedKey = aliases[nameOrCode.toLowerCase()];\n\n        if (foundNamedKey) {\n          return foundNamedKey === keyCode;\n        }\n      } else if (typeof nameOrCode === 'number') {\n        return nameOrCode === keyCode;\n      }\n\n      return false;\n    }\n  };\n\n  exports = module.exports = keyCode;\n  /**\n   * Get by name\n   *\n   *   exports.code['enter'] // => 13\n   */\n\n  var codes = exports.code = exports.codes = {\n    'backspace': 8,\n    'tab': 9,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause/break': 19,\n    'caps lock': 20,\n    'esc': 27,\n    'space': 32,\n    'page up': 33,\n    'page down': 34,\n    'end': 35,\n    'home': 36,\n    'left': 37,\n    'up': 38,\n    'right': 39,\n    'down': 40,\n    'insert': 45,\n    'delete': 46,\n    'command': 91,\n    'left command': 91,\n    'right command': 93,\n    'numpad *': 106,\n    'numpad +': 107,\n    'numpad -': 109,\n    'numpad .': 110,\n    'numpad /': 111,\n    'num lock': 144,\n    'scroll lock': 145,\n    'my computer': 182,\n    'my calculator': 183,\n    ';': 186,\n    '=': 187,\n    ',': 188,\n    '-': 189,\n    '.': 190,\n    '/': 191,\n    '`': 192,\n    '[': 219,\n    '\\\\': 220,\n    ']': 221,\n    \"'\": 222\n  }; // Helper aliases\n\n  var aliases = exports.aliases = {\n    'windows': 91,\n    '⇧': 16,\n    '⌥': 18,\n    '⌃': 17,\n    '⌘': 91,\n    'ctl': 17,\n    'control': 17,\n    'option': 18,\n    'pause': 19,\n    'break': 19,\n    'caps': 20,\n    'return': 13,\n    'escape': 27,\n    'spc': 32,\n    'spacebar': 32,\n    'pgup': 33,\n    'pgdn': 34,\n    'ins': 45,\n    'del': 46,\n    'cmd': 91\n  };\n  /*!\n   * Programatically add the following\n   */\n  // lower case chars\n\n  for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32; // numbers\n\n\n  for (var i = 48; i < 58; i++) codes[i - 48] = i; // function keys\n\n\n  for (i = 1; i < 13; i++) codes['f' + i] = i + 111; // numpad keys\n\n\n  for (i = 0; i < 10; i++) codes['numpad ' + i] = i + 96;\n  /**\n   * Get by code\n   *\n   *   exports.name[13] // => 'Enter'\n   */\n\n\n  var names = exports.names = exports.title = {}; // title for backward compat\n  // Create reverse mapping\n\n  for (i in codes) names[codes[i]] = i; // Add aliases\n\n\n  for (var alias in aliases) {\n    codes[alias] = aliases[alias];\n  }\n});\nvar keycode_1 = keycode.code;\nvar keycode_2 = keycode.codes;\nvar keycode_3 = keycode.aliases;\nvar keycode_4 = keycode.names;\nvar keycode_5 = keycode.title;\n/*\nCopyright (c) 2018 Daybrush\n@name: @daybrush/utils\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/utils\n@version 0.10.1\n*/\n\n/**\n* get string \"string\"\n* @memberof Consts\n* @example\nimport {STRING} from \"@daybrush/utils\";\n\nconsole.log(STRING); // \"string\"\n*/\n\nvar STRING = \"string\";\n/**\n* Check the type that the value is isArray.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isArray} from \"@daybrush/utils\";\n\nconsole.log(isArray([])); // true\nconsole.log(isArray({})); // false\nconsole.log(isArray(undefined)); // false\nconsole.log(isArray(null)); // false\n*/\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n/**\n* Check the type that the value is string.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isString} from \"@daybrush/utils\";\n\nconsole.log(isString(\"1234\")); // true\nconsole.log(isString(undefined)); // false\nconsole.log(isString(1)); // false\nconsole.log(isString(null)); // false\n*/\n\n\nfunction isString(value) {\n  return typeof value === STRING;\n}\n/**\n* Sets up a function that will be called whenever the specified event is delivered to the target\n* @memberof DOM\n* @param - event target\n* @param - A case-sensitive string representing the event type to listen for.\n* @param - The object which receives a notification (an object that implements the Event interface) when an event of the specified type occurs\n* @param - An options object that specifies characteristics about the event listener. The available options are:\n* @example\nimport {addEvent} from \"@daybrush/utils\";\n\naddEvent(el, \"click\", e => {\n  console.log(e);\n});\n*/\n\n\nfunction addEvent(el, type, listener, options) {\n  el.addEventListener(type, listener, options);\n}\n/**\n* removes from the EventTarget an event listener previously registered with EventTarget.addEventListener()\n* @memberof DOM\n* @param - event target\n* @param - A case-sensitive string representing the event type to listen for.\n* @param - The EventListener function of the event handler to remove from the event target.\n* @example\nimport {addEvent, removeEvent} from \"@daybrush/utils\";\nconst listener = e => {\n  console.log(e);\n};\naddEvent(el, \"click\", listener);\nremoveEvent(el, \"click\", listener);\n*/\n\n\nfunction removeEvent(el, type, listener) {\n  el.removeEventListener(type, listener);\n}\n\nvar codeData = {\n  \"+\": \"plus\",\n  \"left command\": \"meta\",\n  \"right command\": \"meta\"\n};\nvar keysSort = {\n  shift: 1,\n  ctrl: 2,\n  alt: 3,\n  meta: 4\n};\n/**\n * @memberof KeyController\n */\n\nfunction getKey(keyCode) {\n  var key = keycode_4[keyCode] || \"\";\n\n  for (var name in codeData) {\n    key = key.replace(name, codeData[name]);\n  }\n\n  return key.replace(/\\s/g, \"\");\n}\n/**\n * @memberof KeyController\n */\n\n\nfunction getCombi(e, key) {\n  if (key === void 0) {\n    key = getKey(e.keyCode);\n  }\n\n  var keys = [e.shiftKey && \"shift\", e.ctrlKey && \"ctrl\", e.altKey && \"alt\", e.metaKey && \"meta\"];\n  keys.indexOf(key) === -1 && keys.push(key);\n  return keys.filter(Boolean);\n}\n\nfunction getArrangeCombi(keys) {\n  var arrangeKeys = keys.slice();\n  arrangeKeys.sort(function (prev, next) {\n    var prevScore = keysSort[prev] || 5;\n    var nextScore = keysSort[next] || 5;\n    return prevScore - nextScore;\n  });\n  return arrangeKeys;\n}\n\nvar globalKeyController;\n/**\n */\n\nvar KeyController = /*#__PURE__*/function (_super) {\n  __extends(KeyController, _super);\n  /**\n   *\n   */\n\n\n  function KeyController(container) {\n    if (container === void 0) {\n      container = window;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.container = container;\n    /**\n     */\n\n    _this.ctrlKey = false;\n    /**\n     */\n\n    _this.altKey = false;\n    /**\n     *\n     */\n\n    _this.shiftKey = false;\n    /**\n     *\n     */\n\n    _this.metaKey = false;\n\n    _this.clear = function () {\n      _this.ctrlKey = false;\n      _this.altKey = false;\n      _this.shiftKey = false;\n      _this.metaKey = false;\n      return _this;\n    };\n\n    _this.keydownEvent = function (e) {\n      _this.triggerEvent(\"keydown\", e);\n    };\n\n    _this.keyupEvent = function (e) {\n      _this.triggerEvent(\"keyup\", e);\n    };\n\n    _this.blur = function () {\n      _this.clear();\n\n      _this.trigger(\"blur\");\n    };\n\n    addEvent(container, \"blur\", _this.blur);\n    addEvent(container, \"keydown\", _this.keydownEvent);\n    addEvent(container, \"keyup\", _this.keyupEvent);\n    return _this;\n  }\n\n  var __proto = KeyController.prototype;\n  Object.defineProperty(KeyController, \"global\", {\n    /**\n     */\n    get: function get() {\n      return globalKeyController || (globalKeyController = new KeyController());\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  KeyController.setGlobal = function () {\n    return this.global;\n  };\n  /**\n   *\n   */\n\n\n  __proto.destroy = function () {\n    var container = this.container;\n    this.clear();\n    this.off();\n    removeEvent(container, \"blur\", this.blur);\n    removeEvent(container, \"keydown\", this.keydownEvent);\n    removeEvent(container, \"keyup\", this.keyupEvent);\n  };\n  /**\n   *\n   */\n\n\n  __proto.keydown = function (comb, callback) {\n    return this.addEvent(\"keydown\", comb, callback);\n  };\n  /**\n   *\n   */\n\n\n  __proto.offKeydown = function (comb, callback) {\n    return this.removeEvent(\"keydown\", comb, callback);\n  };\n  /**\n   *\n   */\n\n\n  __proto.offKeyup = function (comb, callback) {\n    return this.removeEvent(\"keyup\", comb, callback);\n  };\n  /**\n   *\n   */\n\n\n  __proto.keyup = function (comb, callback) {\n    return this.addEvent(\"keyup\", comb, callback);\n  };\n\n  __proto.addEvent = function (type, comb, callback) {\n    if (isArray(comb)) {\n      this.on(type + \".\" + getArrangeCombi(comb).join(\".\"), callback);\n    } else if (isString(comb)) {\n      this.on(type + \".\" + comb, callback);\n    } else {\n      this.on(type, comb);\n    }\n\n    return this;\n  };\n\n  __proto.removeEvent = function (type, comb, callback) {\n    if (isArray(comb)) {\n      this.off(type + \".\" + getArrangeCombi(comb).join(\".\"), callback);\n    } else if (isString(comb)) {\n      this.off(type + \".\" + comb, callback);\n    } else {\n      this.off(type, comb);\n    }\n\n    return this;\n  };\n\n  __proto.triggerEvent = function (type, e) {\n    this.ctrlKey = e.ctrlKey;\n    this.shiftKey = e.shiftKey;\n    this.altKey = e.altKey;\n    this.metaKey = e.metaKey;\n    var key = getKey(e.keyCode);\n    var isToggle = key === \"ctrl\" || key === \"shift\" || key === \"meta\" || key === \"alt\";\n    var param = {\n      key: key,\n      isToggle: isToggle,\n      inputEvent: e,\n      keyCode: e.keyCode,\n      ctrlKey: e.ctrlKey,\n      altKey: e.altKey,\n      shiftKey: e.shiftKey,\n      metaKey: e.metaKey\n    };\n    this.trigger(type, param);\n    this.trigger(type + \".\" + key, param);\n    var combi = getCombi(e, key);\n    combi.length > 1 && this.trigger(type + \".\" + combi.join(\".\"), param);\n  };\n\n  return KeyController;\n}(Component);\n\nexport default KeyController;\nexport { getCombi, getKey };","map":null,"metadata":{},"sourceType":"module"}